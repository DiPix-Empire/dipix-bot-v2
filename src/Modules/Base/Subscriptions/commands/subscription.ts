import { SlashCommandBuilder, Interaction, ActionRowBuilder, ButtonBuilder, ButtonStyle } from "discord.js";
import { ErrorEmbed, InfoEmbed } from "../../../../Data/Embeds";
import { Module } from "../../../../types/Module";
import DiscordEvent from "../../../../types/ModuleEvent/DiscordEvent";
import { getPlanDetail } from "../util/plans";

export default (module: Module) => {
	module.logger.Verbose(module.app.bot.uploadSlashCommand("main", (slashCommand: SlashCommandBuilder) => slashCommand
		.setName("subscription")
		.setDescription("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–æ–π.")
	))
	module.addEvent(new DiscordEvent("interactionCreate", async (interaction: Interaction) => {
		if (!interaction.isCommand()) return
		if (interaction.commandName != "subscription") return
		try {
			await interaction.deferReply({ ephemeral: true })
			
			let result = InfoEmbed("–ü–æ–¥–ø–∏—Å–∫–∞", `–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–æ–π:`)
				.addFields(
					{ name: "üîÑ –û–±–Ω–æ–≤–∏—Ç—å", value: "–û–±–Ω–æ–≤–∏—Ç—å –ø–µ—Ä–∏–æ–¥ –ø–æ–¥–ø–∏—Å–∫–∏" },
					{ name: "üìù –ò–∑–º–µ–Ω–∏—Ç—å", value: "–°–º–µ–Ω–∏—Ç—å —Ç–∞—Ä–∏—Ñ –ø–æ–¥–ø–∏—Å–∫–∏" },
					{ name: "üìÉ –ò—Å—Ç–æ—Ä–∏—è", value: "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –ø–µ—Ä–∏–æ–¥—ã" },
				)
			
			let buttons = new ActionRowBuilder<ButtonBuilder>().addComponents(
				new ButtonBuilder()
					.setLabel("–û–±–Ω–æ–≤–∏—Ç—å")
					.setStyle(ButtonStyle.Primary)
					.setCustomId("sub:button:update")
					.setEmoji({ name: 'üîÑ' }),
				new ButtonBuilder()
					.setLabel("–ò–∑–º–µ–Ω–∏—Ç—å")
					.setStyle(ButtonStyle.Secondary)
					.setCustomId("sub:button:change")
					.setEmoji({ name: 'üìù' }),
				new ButtonBuilder()
					.setLabel("–ò—Å—Ç–æ—Ä–∏—è")
					.setStyle(ButtonStyle.Secondary)
					.setCustomId("sub:button:history")
					.setEmoji({ name: 'üìÉ' }),
			)
			await interaction.editReply({ embeds: [result], components: [buttons] })
			// module.logger.Debug("Update response", await module.app.rest.send("/subscription/update", { id: user.id }))
		} catch (err) {
			module.logger.Error(err);
			(interaction.replied || interaction.deferred) ?
				await interaction.editReply({ embeds: [ErrorEmbed()] }) :
				await interaction.reply({ embeds: [ErrorEmbed()], ephemeral: true })
		}
	}))
}
